diff --git a/src/common.c b/src/common.c
index bd3005d..17d246f 100644
--- a/src/common.c
+++ b/src/common.c
@@ -463,7 +463,8 @@ void update_stuff(void)
 #endif
 }
 
-int round_to_int(float f)
+/* Ohkie to return negative values for temperatures */
+int round_to_int_temp(float f)
 {
 	if (f >= 0.0) {
 		return (int) (f + 0.5);
@@ -471,3 +472,13 @@ int round_to_int(float f)
 		return (int) (f - 0.5);
 	}
 }
+/* Don't return negative values for cpugraph, bar, gauge, percentage.
+ * Causes unreasonable numbers to show */
+unsigned int round_to_int(float f)
+{
+	if (f >= 0.0) {
+		return (int) (f + 0.5);
+	} else {
+		return 0;
+	}
+}
diff --git a/src/common.h b/src/common.h
index 5d19886..b025c92 100644
--- a/src/common.h
+++ b/src/common.h
@@ -37,7 +37,9 @@ void format_seconds_short(char *buf, unsigned int n, long t);
 void update_x11info(void);
 #endif
 
-int round_to_int(float);
+int round_to_int_temp(float);
+
+unsigned int round_to_int(float);
 
 extern unsigned long long need_mask;
 extern int no_buffers;
diff --git a/src/conky.c b/src/conky.c
index 2f25800..824b6d0 100644
--- a/src/conky.c
+++ b/src/conky.c
@@ -3440,7 +3440,7 @@ static void generate_text_internal(char *p, int p_max_size,
 						round_to_int(cur->cpu_usage[obj->data.cpu_index] * 255.0));
 			}
 			OBJ(cpugraph) {
-				new_graph(p, obj->a, obj->b, obj->c, obj->d, (unsigned int)
+				new_graph(p, obj->a, obj->b, obj->c, obj->d,
 						round_to_int(cur->cpu_usage[obj->data.cpu_index] * 100),
 						100, 1, obj->showaslog);
 			}
diff --git a/src/temphelper.c b/src/temphelper.c
index 9e94cfd..473fbbc 100644
--- a/src/temphelper.c
+++ b/src/temphelper.c
@@ -87,7 +87,7 @@ int temp_print(char *p, size_t p_max_size, double n, enum TEMP_UNIT input_unit)
 	int out;
 	size_t plen;
 
-	out = round_to_int(convert_temp_output(n, input_unit));
+	out = round_to_int_temp(convert_temp_output(n, input_unit));
 	plen = spaced_print(p, p_max_size, "%d", 3, out);
 
 	return !(plen >= p_max_size);
